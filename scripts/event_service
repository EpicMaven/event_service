#!/bin/bash
#
# /etc/init.d/event_service
#
# Startup script for Event Service
#
# chkconfig: 2345 80 20
# description: Starts and stops Event Service
# pidfile: /var/run/event_service/event_service.pid

### BEGIN INIT INFO
# Provides:          event_service
# Required-Start:    $remote_fs $network $named $time
# Required-Stop:     $remote_fs $network $named $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: simple RESTful service for posting/getting events
# Description:       Simple Spring Boot RESTful service for adding and retrieving events.
#                    An event has a type, value, time, and UUID.

### END INIT INFO

. /etc/rc.d/init.d/functions

export EVENT_HOME=/opt/event_service
export EVENT_JAR_DIR=$EVENT_HOME
NAME="event_service"
OWNER=root
log_file=/opt/event_service/event_service.log
pid_file=/var/run/event_service/event_service.pid
lock_file=/var/lock/subsys/$NAME
PORT=80
JAVA_OPTS="-Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses -Dserver.port=$PORT"
JAVA_JAR_REGEX="event_service-*jar"

# The first existing directory is used for JAVA_HOME if needed.
JVM_SEARCH_DIRS="/usr/java/default/jre /usr/lib/jvm/jre /usr/lib/jvm/jre-1.7.* /usr/lib/jvm/java-1.7.*/jre"

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# If JAVA_HOME has not been set, try to determine it.
if [ -z "$JAVA_HOME" ]; then
    # If java is in PATH, use a JAVA_HOME that corresponds to that. This is
    # both consistent with how the upstream startup script works, and with
    # the use of alternatives to set a system JVM (as is done on Debian and
    # Red Hat derivatives).
    java="`/usr/bin/which java 2>/dev/null`"
    if [ -n "$java" ]; then
        java=`readlink --canonicalize "$java"`
        JAVA_HOME=`dirname "\`dirname \$java\`"`
    else
        # No JAVA_HOME set and no java found in PATH; search for a JVM.
        for jdir in $JVM_SEARCH_DIRS; do
            if [ -x "$jdir/bin/java" ]; then
                JAVA_HOME="$jdir"
                break
            fi
        done
        # if JAVA_HOME is still empty here, punt.
    fi
fi
JAVA="$JAVA_HOME/bin/java"
export JAVA_HOME JAVA

EVENT_JAR=$(ls -rv1 $EVENT_JAR_DIR/$JAVA_JAR_REGEX | head -n1)
if [ ! -f $EVENT_JAR ]; then
    echo "$EVENT_JAR does not exist!"
    exit 1
fi

case "$1" in
    start)
        echo -n "Starting $NAME: "
        [ -d `dirname "$pid_file"` ] || \
            install -m 755 -o $OWNER -g $OWNER -d `dirname $pid_file`
        su $OWNER -c "$JAVA $JAVA_OPTS -jar $EVENT_JAR >> $log_file &  echo \$! > $pid_file"
        retval=$?
        [ $retval -eq 0 ] && touch $lock_file
        echo "OK"
        ;;
    stop)
        echo -n "Shutdown $NAME: "
        if [ ! -f $pid_file ]; then
            pid=$(ps uax | grep $EVENT_JAR | grep $JAVA | grep $OWNER | awk '{print $2}')
            if [ "$pid" == "" ]; then
                echo "OK"
                exit 0
            else
                echo $pid > $pid_file
            fi
        fi
        su $OWNER -c "kill `cat $pid_file`"
        retval=$?
        if [ $retval -eq 0 ]; then
            rm -f $pid_file
            echo "OK"
            exit 0
        else
            echo "ERROR: could not stop $NAME"
            exit 1
        fi
        ;;
    reload|restart)
        $0 stop
        $0 start
        ;;
    status)
        status -p $pid_file $NAME
        exit $?
        ;;
    *)
        echo "Usage: `basename $0` start|stop|status|restart|reload"
        exit 1
esac

exit 0
